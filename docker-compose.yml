services:
  # üöÄ Backend (Node.js + Express)
  backend:
    build:
      context: ./backend
    ports:
      - "3000:3000"
    volumes:
      - ./backend:/app  # Monta el c√≥digo fuente en desarrollo
      - /app/node_modules  # Evita sobrescribir node_modules
    environment:
      - NODE_ENV=development
    command: npm run dev  # Usa nodemon para desarrollo
    depends_on:
      postgres:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    restart: on-failure

  # üåç Frontend (Angular)
  frontend:
    build:
      context: ./frontend
    ports:
      - "4200:4200"
    environment:
      - API_URL=http://backend:3000
    volumes:
      - ./frontend:/app  # Monta el c√≥digo fuente en desarrollo
      - /app/node_modules  # Evita sobreescribir dependencias
    command: ng serve --host 0.0.0.0 --disable-host-check
    restart: on-failure

  # üõ¢Ô∏è Base de datos PostgreSQL
  postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: voting_system
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db-scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    restart: on-failure
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin"]
      interval: 10s
      timeout: 5s
      retries: 3

  # üõ¢Ô∏è Base de datos MongoDB
  mongodb:
    image: mongo:6
    environment:
      - MONGO_URI=mongodb://mongodb:27017/voting_system
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    restart: on-failure
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh --quiet
      interval: 10s
      timeout: 5s
      retries: 3

# üõë Vol√∫menes para bases de datos
volumes:
  postgres_data:
    name: voting_postgres_data
  mongo_data:
    name: voting_mongo_data
