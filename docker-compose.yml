services:
  # üöÄ Backend (Node.js + Express)
  backend:
    build:
      context: ./backend  # Carpeta donde est√° el c√≥digo del backend
    ports:
      - "3000:3000"  # Mapea el puerto 3000 del contenedor al 3000 local
    volumes:
      - /app/node_modules  # Evita que node_modules se sobrescriba al montar c√≥digo en desarrollo
    command: npm start  # Ejecuta el backend con npm start
    depends_on:
      postgres:
        condition: service_healthy  # Espera a que PostgreSQL est√© listo antes de arrancar
      mongodb:
        condition: service_healthy  # Espera a que MongoDB est√© listo antes de arrancar
    restart: on-failure  # Reinicia el contenedor solo si falla

  # üåç Frontend (Angular)
  frontend:
    build:
      context: ./frontend  # Carpeta donde est√° el c√≥digo del frontend
    ports:
      - "4200:4200"  # Mapea el puerto 4200 del contenedor al 4200 local (Asegura que http-server use 4200)
    volumes:
      - /app/node_modules  # Evita sobreescribir dependencias
    restart: on-failure  # Solo reinicia si falla

  # üõ¢Ô∏è Base de datos PostgreSQL
  postgres:
    image: postgres:15  # Usa la imagen oficial de PostgreSQL versi√≥n 15
    environment:
      POSTGRES_USER: admin  # Usuario de la base de datos
      POSTGRES_PASSWORD: admin  # Contrase√±a de la base de datos
      POSTGRES_DB: voting_system  # Nombre de la base de datos
    ports:
      - "5432:5432"  # Expone el puerto 5432 localmente
    volumes:
      - postgres_data:/var/lib/postgresql/data  # Usa un volumen persistente para almacenar los datos
    restart: on-failure  # Solo reinicia si falla
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin"]  # Comprobar si PostgreSQL est√° activo
      interval: 10s  # Verifica cada 10 segundos
      timeout: 5s  # Espera m√°ximo 5 segundos
      retries: 3  # Reintenta 3 veces antes de fallar

  # üõ¢Ô∏è Base de datos MongoDB
  mongodb:
    image: mongo:6  # Usa la imagen oficial de MongoDB versi√≥n 6
    environment:
      - MONGO_URI=mongodb://mongodb:27017/voting_system  # URL de conexi√≥n a MongoDB
    ports:
      - "27017:27017"  # Expone el puerto 27017 localmente
    volumes:
      - mongo_data:/data/db  # Usa un volumen persistente para los datos
    restart: on-failure  # Solo reinicia si falla
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh --quiet  # Verifica si MongoDB est√° activo
      interval: 10s  # Cada 10 segundos
      timeout: 5s  # Espera m√°ximo 5 segundos
      retries: 3  # Reintenta 3 veces antes de fallar

# üõë Definici√≥n de vol√∫menes (para persistencia de datos)
volumes:
  postgres_data:
    name: voting_postgres_data  # Nombre del volumen de PostgreSQL
  mongo_data:
    name: voting_mongo_data  # Nombre del volumen de MongoDB
